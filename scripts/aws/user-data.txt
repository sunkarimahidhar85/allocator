#!/bin/bash

# Note:  user-data doesn't need to run as `sudo`:
# Script:  /var/lib/cloud/instance/scripts/part-001
# Output:  /var/log/cloud-init-output.log

####################
### LOCAL MASTER ###
####################

# Derived from https://gist.github.com/ericstoekl/1d4372e9398d9cec7ec028629b2c36e2
#          and https://medium.com/@ericstoekl/deploying-openfaas-on-kubernetes-aws-259ec9.05e3c
#          and https://github.com/Langhalsdino/Kubernetes-GPU-Guide/blob/4a6505e8091c9f62aac312630cff928fc25e64f9/README.md  
#          and https://abdel.me/2017/09/28/aws-ami-deep-learning-keras/

apt-get install -y --no-install-recommends \
  build-essential \
  cuda-command-line-tools-9-0 \
  cuda-cublas-dev-9-0 \
  cuda-cudart-dev-9-0 \
  cuda-cufft-dev-9-0 \
  cuda-curand-dev-9-0 \
  cuda-cusolver-dev-9-0 \
  cuda-cusparse-dev-9-0

cd /usr/local && ln -s cuda-9.0 cuda && cd /root
ldconfig /usr/local/cuda/lib64
ldconfig /usr/local/cuda-9.0/lib64

# Hack to expose `nvidia-smi` for people like me who are happy when it works!
cp /usr/bin/nvidia-smi /usr/local/cuda/bin/

# Install Anaconda with Python3
wget -q https://repo.continuum.io/miniconda/Miniconda3-4.3.31-Linux-x86_64.sh -O /tmp/miniconda.sh  && \
    echo '7fe70b214bee1143e3e3f0467b71453c */tmp/miniconda.sh' | md5sum -c - && \
    bash /tmp/miniconda.sh -f -b -p /opt/conda && \
    /opt/conda/bin/conda install --yes python=3.6 sqlalchemy tornado jinja2 traitlets requests pip && \
    /opt/conda/bin/pip install --upgrade pip && \
    rm /tmp/miniconda.sh

export PATH=/opt/conda/bin:$PATH
echo "export PATH=/opt/conda/bin:$PATH" >> /root/.bashrc

conda update -n base conda

pip install --upgrade pip

apt-get install -y apt-transport-https
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" > /etc/apt/sources.list.d/kubernetes.list
apt-get update

apt-get install -y --no-install-recommends \
  kubelet=1.9.2-00 \
  kubeadm=1.9.2-00 \
  kubernetes-cni=0.6.0-00

sed -i 's/KUBELET_EXTRA_ARGS/KUBELET_EXTRA_ARGS --feature-gates="Accelerators=true"/' /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
systemctl daemon-reload
systemctl restart kubelet
kubeadm init --ignore-preflight-errors=all
mkdir -p /root/.kube
cp /etc/kubernetes/admin.conf /root/.kube/config
# Must taint and re-apply after init!
kubectl taint nodes --all node-role.kubernetes.io/master-
#kubectl create -f https://raw.githubusercontent.com/PipelineAI/standalone/master/yaml/dashboard/weavescope-1.7.0.yaml 

# TODO:  Use a specific tag/branch/commit hash!!
# Install Local Docker Registry
#kubectl create -f https://raw.githubusercontent.com/PipelineAI/standalone/master/yaml/registry/registry-rc.yaml
#kubectl create -f https://raw.githubusercontent.com/PipelineAI/standalone/master/yaml/registry/registry-svc.yaml
#kubectl create -f https://raw.githubusercontent.com/PipelineAI/standalone/master/yaml/registry/registry-ds.yaml

#REGISTRY_POD=$(kubectl get pods --namespace kube-system -l k8s-app=kube-registry-upstream \
#            -o template --template '{{range .items}}{{.metadata.name}} {{.status.phase}}{{"\n"}}{{end}}' \
#            | grep Running | head -1 | cut -f1 -d' ')
# TODO:  nohup needed?
#kubectl port-forward --namespace kube-system $REGISTRY_POD 5000:5000 &

# TODO:  Use a specific tag/branch/commit hash!!
# Install Dashboards
#kubectl create -f https://raw.githubusercontent.com/PipelineAI/standalone/master/yaml/dashboard/kubernetes-dashboard-1.8.1.yaml

# Hystrix
kubectl create -f https://raw.githubusercontent.com/PipelineAI/standalone/master/yaml/dashboard/hystrix-deploy.yaml
kubectl create -f https://raw.githubusercontent.com/PipelineAI/standalone/master/yaml/dashboard/hystrix-svc.yaml

# Turbine
kubectl create -f https://raw.githubusercontent.com/PipelineAI/standalone/master/yaml/dashboard/turbine-deploy.yaml
kubectl create -f https://raw.githubusercontent.com/PipelineAI/standalone/master/yaml/dashboard/turbine-svc.yaml

# Admin
kubectl create -f https://raw.githubusercontent.com/PipelineAI/standalone/master/yaml/admin/admin-deploy.yaml
kubectl create -f https://raw.githubusercontent.com/PipelineAI/standalone/master/yaml/admin/admin-svc.yaml

# Install Heapster for Monitoring
# TODO:  This appears to be installed by default
kubectl create -f https://raw.githubusercontent.com/PipelineAI/standalone/master/yaml/dashboard/heapster-1.7.0.yaml

# Install WeaveScope
kubectl create -f https://raw.githubusercontent.com/PipelineAI/standalone/master/yaml/dashboard/weavescope-1.7.0.yaml

curl -L https://github.com/istio/istio/releases/download/0.4.0/istio-0.4.0-linux.tar.gz | tar xz
export PATH=$PATH:/root/istio-0.4.0/bin
echo "export PATH=$PATH:/root/istio-0.4.0/bin" >> /root/.bashrc
kubectl apply -f /root/istio-0.4.0/install/kubernetes/istio.yaml
# Run this twice due to potential race condition where CRD's aren't yet created
kubectl apply -f /root/istio-0.4.0/install/kubernetes/istio.yaml

# FaaS-netes
kubectl create -f https://raw.githubusercontent.com/PipelineAI/standalone/master/yaml/openfaas/faasnetesd.yml
kubectl create -f https://raw.githubusercontent.com/PipelineAI/standalone/master/yaml/openfaas/gateway.yml
kubectl create -f https://raw.githubusercontent.com/PipelineAI/standalone/master/yaml/openfaas/nats.yml
kubectl create -f https://raw.githubusercontent.com/PipelineAI/standalone/master/yaml/openfaas/rbac.yml

pip install cli-pipeline==1.5.51

apt-get install -y awscli

aws ecr get-login --region=us-west-2 | sed 's/-e none//' | sh

docker pull 954636985443.dkr.ecr.us-west-2.amazonaws.com/pipelineai/notebook-gpu:1.5.0
docker tag 954636985443.dkr.ecr.us-west-2.amazonaws.com/pipelineai/notebook-gpu:1.5.0 docker.io/pipelineai/notebook-gpu:1.5.0

# TODO:  Use a specific tag/branch/commit hash!!
# Install notebook
kubectl create -f https://raw.githubusercontent.com/PipelineAI/standalone/master/yaml/notebook/notebook-gpu-deploy.yaml
kubectl create -f https://raw.githubusercontent.com/PipelineAI/standalone/master/yaml/notebook/notebook-gpu-svc.yaml

#cd /root
#git clone https://github.com/PipelineAI/notebooks.git
#cd notebooks
#git reset --hard 625f24c

#cd /root
#git clone https://github.com/PipelineAI/models.git
#cd models
#git reset --hard 5ac2690

##################
# Join a Cluster #
##################
#kubeadm reset
#sed -i 's/KUBELET_EXTRA_ARGS/KUBELET_EXTRA_ARGS --feature-gates="Accelerators=true"/' /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
#systemctl daemon-reload
#systemctl restart kubelet
#kubeadm join --token 183d59.9159700a9b7db5fa 172.31.6.14:6443 --discovery-token-ca-cert-hash sha256:6f395dd3bb20cd0d944d398d267dae4a3c612d947ac3050ed08713af5c8d0a54
#kubeadm join --token <token> <master-internal-ec2-ip>:6443 --discovery-token-ca-cert-hash <hash>

